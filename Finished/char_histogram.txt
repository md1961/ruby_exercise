S007:データヒストグラム

情報の通信を行う上で、圧縮は必要不可欠な技術です。 生のデータをそのまま通信に用いると非常に多くの時間がかかる場合でも、そのデータの特徴を活かした適切な圧縮を行うことによりデータサイズを大幅に削減し、高速に通信を行うことができます。

例えば次のような特徴を持ったデータを考えます。

・データは文字列で表され、文字数は最大で 2^60 と非常に長い文字列の可能性があります。
・データに含まれる文字は英小文字('a' - 'z') の26種類のみからなります。
・データには規則性があり、同様の文字列の繰り返しの組み合わせで表現可能です。

このような特徴を活かした圧縮方法はいろいろ考えられますが、ここでは次のような書式に従う圧縮方法を考えてみます。

2(2u2lt4d)3(rb)pa

これは繰り返し回数を数字によって表現した書式です。 数字(文字列) という書式は文字列を数字の回数だけ繰り返すことを表します。 ただし、数字が1 のときは数字は省略され、丸括弧の中の文字列の長さが1のときは丸括弧も省略されます。 上記の例はこのルールに従って書かれています。

この例を展開すると次の文字列になります。

uulltdddduulltddddrbrbrbpa

さて、この程度の大きさのデータであれば展開した文字列もそれほど大きくはなりませんが、例えば次のような圧縮後のデータを考えてみます。

10000(10000(10000(2000(ab)500(dz)c200h)2mu3000(fpr)))

このデータを展開すると文字列の長さは5,201,900,300,000,000文字になります。

また、圧縮されたデータは必ずしも最適に圧縮されているとは限りません。例えば、uuuuuu は圧縮後の文字列が最短という意味において6u が最適な圧縮ですが、2(3u)、3(2u)、3u3u、4uuu、uuuuuu などのように最適でない圧縮が行われている場合もあります。

上記書式に従った圧縮後のデータが与えられるので、そのデータを展開して得られる圧縮前の文字列に対して、'a' - 'z' の文字がそれぞれ何文字出現しているかを求めるプログラムを作成してください。ただし、与えられる圧縮後のデータの長さは1000文字を超えません。また、圧縮前の文字列の長さは2^60 (= 1,152,921,504,606,846,976) 文字を超えません。

入力される値

入力は次のフォーマットで与えられます。
S
S は圧縮後のデータを表す文字列で、半角英数小文字a-z,(,),半角数字のみで構成された文字列が入力されます。

文字列は標準入力から渡されます。標準入力からの値取得方法はこちらをご確認ください

期待する出力

以下のように展開された文字列に出現するaからz全てのアルファベットとその出現回数をスペース区切りで、各アルファベットごとに改行区切りで出力して下さい。
a aの出現回数
b bの出現回数
...
z zの出現回数
それぞれの行において、文字と出現回数の間は半角の空白1文字で区切ってください。
最後は改行し、余計な文字、空行を含んではいけません。

条件

すべてのテストケースにおいて、以下の条件を満たします。

1 ≦ 圧縮された文字列S の長さ ≦ 1000
1 ≦ 圧縮前の文字列の長さ ≦ 2^60

入力例1
abcdefg10h12(ij2(3k))l9mnop4(3(2(6(qq)r)s5tu)7v5w)x15(yz)

出力例1
a 1
b 1
c 1
d 1
e 1
f 1
g 1
h 10
i 12
j 12
k 72
l 1
m 9
n 1
o 1
p 1
q 288
r 24
s 12
t 60
u 12
v 28
w 20
x 1
y 15
z 15

入力例2
10000(10000(10000(2000(ab)500(dz)c200h)2mu3000(fpr)))

出力例2
a 2000000000000000
b 2000000000000000
c 1000000000000
d 500000000000000
e 0
f 300000000000
g 0
h 200000000000000
i 0
j 0
k 0
l 0
m 200000000
n 0
o 0
p 300000000000
q 0
r 300000000000
s 0
t 0
u 100000000
v 0
w 0
x 0
y 0
z 500000000000000
